{
  "hash": "50092ed6c70bba0962bf368fc787a185",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introdução ao R: Funções, Objetos e Classes\"\ntitle-block-banner: true\nauthor: \"William Barbosa\"\ndescription: |\n  \"Conceitos básicos R\"\ndate: \"2023-12-31\"\ncategories: [R,VS Code]\nimage: \"Rlogo.svg\"\nlang: pt\nsidebar: false\n---\n\n\n\n# Objetivo\n\nEste post tem por objetivo o auxílio para introdução ao R.\n\n# Introdução\n\nO R é uma linguagem de programação e ambiente de software amplamente utilizado para análise estatística e computação gráfica (e muito mais!). Sua história remonta aos anos 90, quando foi criado por [Ross Ihaka e Robert Gentleman](https://www.stat.auckland.ac.nz/~ihaka/downloads/R-paper.pdf) na Universidade de Auckland, na Nova Zelândia. O R foi inspirado na linguagem S desenvolvida por John Chambers na Bell Labs, uma linguagem também voltada para estatísticas e análises de dados. O nome \"R\" foi escolhido como uma homenagem a essas duas influências (a linguagem S e os próprios criadores, Ross e Robert), mas também porque a letra \"R\" remete à palavra \"research\" (pesquisa), refletindo o objetivo da linguagem.\n\nDesde a sua criação, o R cresceu consideravelmente e se tornou uma das linguagens mais populares para análise de dados, especialmente em estatísticas e ciência de dados. Ao longo dos anos, a comunidade de usuários e desenvolvedores do R se expandiu e contribuiu com um vasto conjunto de pacotes, bibliotecas e recursos que estendem as funcionalidades da linguagem. Em 2023, existem 20.249 pacotes disponíveis via [CRAN](https://journal.r-project.org/news/RJ-2023-4-cran/).\n\nUma das principais vantagens do R é a sua open-source, ou seja, é de código aberto e gratuito, o que permitiu uma adoção rápida e um contínuo aprimoramento. Hoje, o R é utilizado por cientistas, economistas, estatísticos, analistas de dados e até profissionais de áreas como saúde e marketing, graças à sua grande flexibilidade e poder para realizar análises complexas e visualizações de dados de maneira eficiente.\n\nNo R, a programação é orientada principalmente a funções e objetos. Na minha opinião, o paradigma de programação no R é um confusão entre programação funcional e orientada a objetos, o que o torna único em termos de flexibilidade e poder para análise de dados. Nessa linguagem, um objeto é uma instância de uma classe. Eles podem ser qualquer coisa, desde um vetor numérico simples até estruturas complexas como data frames ou modelos estatísticos. Objetos encapsulam dados e métodos que operam sobre esses dados, permitindo que o usuário crie soluções mais modularizadas e reutilizáveis.\n\nQuando é criado um objeto no R, se cria uma estrutura que contém informações (atributos) e comportamentos (funções) que podem ser aplicados ao dados. A manipulação de objetos é realizada por meio de funções, que definem o que pode ser feito com os dados dentro do objeto.\n\n# Funções\n\nFormalmente, as linhas digitadas são blocos de código que realizam operações e retornam resultados, e são frequentemente aplicadas a objetos. O R tem uma abordagem funcional muito forte, e funções podem ser usadas para realizar transformações em dados, calcular estatísticas, ajustar modelos e até mesmo criar novos tipos de objetos. Abaixo é um exemplo de função anônima em R:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exemplo de comentário\n\n# Exemplo de função\nminha_funcao <- \\(x, y) {\n  return(x + y)\n}\n\n# Ou em versões mais recentes do R ela pode ser declarada como\nminha_funcao <- \\(x, y) {\n  return(x + y)\n}\n\nminha_funcao(2,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}