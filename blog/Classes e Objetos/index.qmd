---
title: "Introdução ao R: Funções, Objetos e Classes"
title-block-banner: true
author: "William Barbosa"
description: |
  "Conceitos básicos R"
date: "2025-04-21"
categories: [R,VS Code]
lang: pt
sidebar: false
---

# Objetivo

Este post tem por objetivo o auxílio para introdução ao R.

# Introdução

O R é uma linguagem de programação e ambiente de software amplamente utilizado para análise estatística e computação gráfica (e muito mais!). Sua história remonta aos anos 90, quando foi criado por [Ross Ihaka e Robert Gentleman](https://www.stat.auckland.ac.nz/~ihaka/downloads/R-paper.pdf) na Universidade de Auckland, na Nova Zelândia. O R foi inspirado na linguagem S desenvolvida por John Chambers na Bell Labs, uma linguagem também voltada para estatísticas e análises de dados. O nome "R" foi escolhido como uma homenagem a essas duas influências (a linguagem S e os próprios criadores, Ross e Robert), mas também porque a letra "R" remete à palavra "research" (pesquisa), refletindo o objetivo da linguagem.

Desde a sua criação, o R cresceu consideravelmente e se tornou uma das linguagens mais populares para análise de dados, especialmente em estatísticas e ciência de dados. Ao longo dos anos, a comunidade de usuários e desenvolvedores do R se expandiu e contribuiu com um vasto conjunto de pacotes, bibliotecas e recursos que estendem as funcionalidades da linguagem. Em 2023, existem 20.249 pacotes disponíveis via [CRAN](https://journal.r-project.org/news/RJ-2023-4-cran/).

Uma das principais vantagens do R é a sua open-source, ou seja, é de código aberto e gratuito, o que permitiu uma adoção rápida e um contínuo aprimoramento. Hoje, o R é utilizado por cientistas, economistas, estatísticos, analistas de dados e até profissionais de áreas como saúde e marketing, graças à sua grande flexibilidade e poder para realizar análises complexas e visualizações de dados de maneira eficiente.

No R, a programação é orientada principalmente a funções e objetos. Na minha opinião, o paradigma de programação no R é uma confusão entre programação funcional e orientada a objetos, o que o torna único em termos de flexibilidade e poder para análise de dados. Nessa linguagem, um objeto é uma instância de uma classe. Eles podem ser qualquer coisa, desde um vetor numérico simples até estruturas complexas como data frames ou modelos estatísticos. Objetos encapsulam dados e métodos que operam sobre esses dados, permitindo que o usuário crie soluções mais modularizadas e reutilizáveis.

Quando é criado um objeto no R, se cria uma estrutura que contém informações (atributos) e comportamentos (funções) que podem ser aplicados ao dados. A manipulação de objetos é realizada por meio de funções, que definem o que pode ser feito com os dados dentro do objeto.

# Funções

Formalmente, as linhas digitadas são blocos de código que realizam operações e retornam resultados, e são frequentemente aplicadas a objetos. O R tem uma abordagem funcional muito forte, e funções podem ser usadas para realizar transformações em dados, calcular estatísticas, ajustar modelos e até mesmo criar novos tipos de objetos. Abaixo é um exemplo de função anônima em R:

```{r eval=TRUE}
# Exemplo de comentário

# Exemplo de função
minha_funcao <- \(x, y) {
  return(x + y)
}

# Ou em versões mais recentes do R ela pode ser declarada como
minha_funcao <- \(x, y) {
  return(x + y)
}

minha_funcao(2,5)

```

O retorno da função pode depender do que o usuário deseja realizar ou da necessidade. Para quem está começando, é muito indicado entender os tipos de dados e as estruturas básicas do R. A seguir vou explorar os principais tipos de dados e estruturas que o R oferece.

# Classes

Uma classe define a estrutura e o comportamento de objetos, ou seja, é um modelo para criar objetos com propriedades e métodos específicos. Quando falamos em orientação a objetos em R, estamos nos referindo à definição de classes e à manipulação de objetos a partir dessas classes. A classe define quais atributos (dados) e métodos (funções) podem ser usados para manipular esses atributos.

# Tipos

Um tipo (ou tipo de dado) é uma classificação que define a natureza dos dados que uma variável ou expressão pode assumir. Ele especifica tanto os valores possíveis que uma variável pode armazenar quanto as operações que podem ser realizadas sobre ela. Em termos formais, um tipo define um conjunto de valores (domínio) e um conjunto de operações que podem ser realizadas nesses valores. O mais básico e inicial é o `atomic` e se refere a tipos de dados simples e indivisíveis, como numeric, integer, character, etc.

## Numeric e Integer

São tipos de dados usados para representar números. O tipo `numeric` é o tipo de dado usado para representar números reais (ou de ponto flutuante). Esses números podem ser positivos ou negativos e podem ter casas decimais. Já `integer` apenas números inteiros;

## Character

O tipo `character` é usado para armazenar texto (strings). Qualquer valor de texto entre aspas simples (') ou duplas (") é considerado um vetor de caracteres;

## Logical

O tipo `logical`, também conhecido como booleano, é usado para representar valores lógicos, ou seja, verdadeiro (`TRUE`) ou falso (`FALSE`). Em R ele também pode ser abreviado com `T` ou `F`. Esse tipo de variável pode ser usadas em operações matemáticas, onde TRUE é tratado como 1 e FALSE como 0, podendo ser somado ou tabulado.

## Vector

Um vetor é uma sequência de valores do mesmo tipo atômico, tais como números ou strings. Formalmente, tipo `vector` é uma estrutura que armazena uma sequência de elementos do mesmo tipo.

## Factor

Os fatores são usados para representar variáveis categóricas em R. Eles são úteis quando você tem um conjunto de dados com variáveis que têm um número limitado de categorias ou níveis (como "sim" e "não", ou "baixo", "médio", "alto"). Fatores permitem que essas categorias sejam tratadas de maneira eficiente, especialmente para modelos estatísticos.

## List

Ao contrário dos vetores, as listas podem conter elementos de diferentes tipos atômicos. Ou seja, uma lista pode armazenar números, strings, vetores, matrizes, entre outros, em um único objeto. As listas são muito úteis para combinar diferentes tipos de dados.

## Matrix

Uma matriz é uma estrutura de dados bidimensional (2D) que contém elementos de um único tipo atômico. As matrizes são basicamente tabelas, onde as linhas e as colunas possuem um formato regular, e todos os dados são do mesmo tipo.

## Data Frame

Um data frame é uma das estruturas de dados mais usadas em R, especialmente para análise de dados. Ele é semelhante a uma tabela, onde cada coluna pode ser de um tipo de dado diferente (por exemplo, números, textos, lógicos). Ao contrário de uma matriz, as colunas de um data frame podem conter diferentes tipos de dados. Também existe o `tibble` que é uma versão mais moderna e eficiente do `data.frame`, com recursos aprimorados para trabalhar com dados tabulares.

## Outros tipos

Existem muitos outros tipos, tais como `Date` e `POSIXt` que são utilizados para armazenar datas e horários. Os tipos `Date` são usados para armazenar datas (como 2023-04-21), enquanto os tipos `POSIXt` são usados para armazenar datas e horários, como '2020-04-21 12:00:00'.

`NULL`: O valor 'NULL' é um tipo especial que representa a ausência de um valor ou a falta de um objeto.

`NA`: O valor 'NA' é usado para representar valores ausentes ou desconhecidos em dados. Pode ocorrer em qualquer tipo de dado (numérico, lógico, caractere, etc.) e é tratado de maneira especial em R.

`complex`: O R representa números complexos, que possuem uma parte real e uma parte imaginária (`i`). Eu, particularmente nunca utilizei, mas pode ser útil em algum momento.

# Conclusão

Em resumo, o R oferece uma variedade rica de tipos de dados que permitem representar desde valores simples, como números e textos, até estruturas mais complexas, como listas, data frames e fatores. Entender essas classes e tipos é fundamental para manipular dados de forma eficaz na linguagem. Embora os tipos apresentados aqui como `numeric`, `character`, `logical`, `factor`, `list`, `matrix`, `data.frame`e `complex` sejam os mais comuns, o R ainda conta com tipos especializados como Date, POSIXt.